@inject CPSC481.Classes.StateContainer StateContainer
@inject NavigationManager NavManager

<div class="flex flex-col h-96 justify-center items-center w-full mt-20">

	<div class="w-72 flex flex-col justify-center items-center">
		<h2 class="text-4xl text-black font-bold pb-4">Log in</h2>
		@if (formError != null)
		{
			<div class="p-4 rounded bg-red w-full flex justify-center items-center text-secondary font-medium text-lg">
				@formError
			</div>
		}
		<div class="w-full flex flex-col justify-start items-start pt-4">
			<p class="text-black text-lg font-medium">Email:</p>
			<input type="email"
				class="w-full p-2 focus:outline-none bg-secondary-2 text-black text-lg border-black border-2 rounded"
				placeholder="Your email" @bind="email" @bind:event="oninput" />
			@if (emailError != null)
			{
				<p class="text-red text-sm font-medium">@emailError</p>
			}
			else
			{
				<p class="text-secondary select-none text-sm font-medium">.</p>
			}
		</div>
		<div class="w-full flex flex-col justify-start items-start">
			<p class="text-black text-lg font-medium">Password:</p>
			<input type="password"
				class="w-full p-2 focus:outline-none bg-secondary-2 text-black text-lg border-black border-2 rounded"
				placeholder="Your password" @bind="password" @bind:event="oninput" />
			@if (passwordError != null)
			{
				<p class="text-red text-sm font-medium">@passwordError</p>
			}
			else
			{
				<p class="text-secondary select-none text-sm font-medium">.</p>
			}
		</div>
		<div class="w-full flex justify-end items-end pb-[1.25rem]">
			<button
				class="w-full h-12 rounded @(missingInfo != null ? "bg-red hover:bg-red-2" : "bg-primary hover:bg-primary-2") transition-all text-center text-xl text-secondary"
				@onclick="login">Login</button>
		</div>
	</div>
</div>

@code {
	protected override void OnInitialized()
	{
		if (StateContainer.isLoggedIn())
		{
			NavManager.NavigateTo("/");
		}
		var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("reRoute", out var _reRoute))
			reRoute = Convert.ToString(_reRoute);
	}
	private string email { get; set; } = String.Empty;
	private string? emailError = null;
	private string password { get; set; } = String.Empty;
	private string? passwordError = null;
	private string? formError = null;
	private string? reRoute;
	private bool? missingInfo = null;
	private void login()
	{
		if (email.Length < 1)
		{
			emailError = "Email is required";
		}
		else
		{
			emailError = null;
		}
		if (password.Length < 1)
		{
			passwordError = "Password is required";
		}
		else
		{
			passwordError = null;
		}
		if (emailError == null && passwordError == null)
		{
			string? error = StateContainer.login(email, password);
			if (error == null)
			{
				if (reRoute == null) NavManager.NavigateTo("/");
				else NavManager.NavigateTo($"/{reRoute}");
			}
			else
			{
				formError = error;
			}
		}
		else
		{
			missingInfo = true;
		}
	}
}