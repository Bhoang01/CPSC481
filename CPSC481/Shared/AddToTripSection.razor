@inject NavigationManager NavManager
@inject CPSC481.Classes.StateContainer StateContainer

<div class="flex flex-col w-1/4 gap-y-3">
	<p class="text-xl font-medium text-black">Current trip: Toronto 2022</p>
	@if (!favorited)
	{
		<button class="p-3 rounded bg-secondary-2 hover:bg-secondary-3 transition-all text-center text-xl text-black"
		@onclick="favorite">Favorite</button>
	}
	else
	{
		<button class="p-3 rounded bg-red hover:bg-red-2 transition-all text-center text-xl text-black text-white"
		@onclick="unFavorite">Remove from favorites</button>
	}
	@if (step == 4)
	{
		@if (state == 1)
		{
			<div class="w-full text-xl font-medium text-secondary bg-green p-3 rounded text-center">Added to Trip!
			</div>
		}
		else
		{
			<div class="w-full text-xl font-medium text-secondary bg-red p-3 rounded text-center">Failed!</div>
			<p class="text-sm text-black font-medium">Try again later...</p>
		}
	}
	else if (step == 0)
	{
		<button class=" p-3 rounded bg-primary hover:bg-primary-2 transition-all text-center text-xl text-secondary"
		@onclick="addToTrip">Add to
			Trip</button>
	}
	@if (step == 1)
	{
		<div class="flex flex-col gap-y-2 border-2 border-black rounded p-2 justify-center items-center">
			<div class="w-full text-center border-b-2 border-black">
				<p class="text-lg font-medium text-black">Choose Trip</p>
			</div>
			<ul class="flex flex-col gap-y-1 justify-center items-center w-full">
				@if (StateContainer.getActiveTrip() != null)
				{
					<li class="p-2 bg-secondary hover:bg-secondary-3 transition-all rounded cursor-pointer text-center w-full"
				@onclick=@(() => setTrip(StateContainer.getActiveTrip()?.id ?? 0))>
						<p class="text-md text-black">@StateContainer.getActiveTrip()?.getName()</p>
					</li>
				}
				<li
				class="flex flex-row justify-center items-center gap-x-2 p-2 bg-secondary hover:bg-secondary-3 transition-all rounded cursor-pointer text-center w-full"
				@onclick="addTrip">
					<p class="text-md text-black">Change active trip</p>
					<svg version="1.1" id="Capa_1" class="h-4 w-4 text-black" viewBox="0 0 27.963 27.963"
					style="enable-background:new 0 0 27.963 27.963;" xml:space="preserve">
						<path
						d="M13.98,0C6.259,0,0,6.26,0,13.982s6.259,13.981,13.98,13.981c7.725,0,13.983-6.26,13.983-13.981 C27.963,6.26,21.705,0,13.98,0z M21.102,16.059h-4.939v5.042h-4.299v-5.042H6.862V11.76h5.001v-4.9h4.299v4.9h4.939v4.299H21.102z" />
					</svg>
				</li>
			</ul>
		</div>
	}
	@if (step == 2)
	{
		<div class="flex flex-col gap-y-2 border-2 border-black rounded p-2 justify-center items-center h-full">
			<div class="w-full text-center border-b-2 border-black">
				<p class="text-lg font-medium text-black">Choose Date & Time</p>
			</div>
			<div class="flex flex-col gap-y-1 w-full">
				<p class="text-md text-black">Date:</p>
				<RadzenDatePicker @bind-Value=@day DateFormat="MMM dd yyyy" Change=@(() => datePicked())
				class="w-full focus:outline-none" />
				<p class="text-md text-black">Time:</p>
				<RadzenDatePicker @bind-Value=@time ShowTime="true" TimeOnly="true" HourFormat="12" DateFormat="HH:mm"
				class="w-full focus:outline-none" />
			</div>
			@if (show)
			{
				<RadzenGoogleMap class="w-full h-full rounded border-black border-2" Center=@(new GoogleMapPosition() { Lat =
			getItemsToday()[0].activity.latitude, Lng = getItemsToday()[0].activity.longitude })>
					@if (getItemsToday().Length > 0)
					{
						@foreach (ItemFormat item in getItemsToday())
						{
							<RadzenGoogleMapMarker Title="@item.activity.name" Label="@item.activity.name" Position=@(new GoogleMapPosition()
				{ Lat = item.activity.latitude, Lng = item.activity.longitude }) />
						}

					}
				</RadzenGoogleMap>
			}
			<div class="flex flex-row justify-center items-center w-full gap-x-2">
				<button class="py-2 bg-red-2 hover:bg-red text-secondary text-md focus:outline-none rounded transition-all w-1/3"
				@onclick="cancel">Cancel</button>
				<button
				class="py-2 bg-primary hover:bg-primary-2 text-secondary text-md focus:outline-none rounded transition-all w-1/3"
				@onclick="confirm">Next</button>
			</div>
		</div>
	}
	@if (step == 3)
	{
		<div class="flex flex-col gap-y-2 border-2 border-black rounded p-2 justify-center items-center">
			<div class="w-full text-center border-b-2 border-black">
				<p class="text-lg font-medium text-black">Confirm Details</p>
			</div>
			<div class="flex flex-col gap-y-1 w-full">
				<p class="text-md text-black">Date:</p>
				<RadzenDatePicker @bind-Value=@day DateFormat="MMM dd yyyy" ReadOnly="true" class="w-full focus:outline-none" />
				<p class="text-md text-black">Time:</p>
				<RadzenDatePicker @bind-Value=@time ShowTime="true" TimeOnly="true" HourFormat="12" ReadOnly="true"
				DateFormat="HH:mm" class="w-full focus:outline-none" />
			</div>
			<div class="flex flex-row justify-center items-center w-full gap-x-2">
				<button class="py-2 bg-red2 hover:bg-red text-cream text-md focus:outline-none rounded transition-all w-1/3"
				@onclick="cancel">Cancel</button>
				<button class="py-2 bg-blue hover:bg-blue2 text-cream text-md focus:outline-none rounded transition-all w-1/3"
				@onclick="addToTrip">Confirm</button>
			</div>
		</div>
	}
</div>

@code {
	[Parameter]
	public int activityId { get; set; }
	private DateTime day = DateTime.Today;
	private DateTime time = DateTime.Today;
	private int step = 0;
	private int trip = 0;
	int state = 0;
	Trip[] trips = Array.Empty<Trip>();
	bool show;
	IList<RadzenGoogleMapMarker> markers = new List<RadzenGoogleMapMarker>();
	bool favorited = false;
	protected override void OnInitialized()
	{
		trips = StateContainer.getTrips();
		favorited = StateContainer.isFavorited(activityId);
		StateContainer.OnChange += StateHasChanged;
	}
	public void Dispose()
	{
		StateContainer.OnChange -= StateHasChanged;
	}

	void favorite()
	{
		favorited = true;
		StateContainer.addToFavorites(activityId);
	}
	void unFavorite()
	{
		favorited = false;
		StateContainer.removeFromFavorites(activityId);
	}
	void datePicked()
	{
		show = true;
		getMarkers();
	}
	void addToTrip()
	{
		bool res = StateContainer.addToItinerary(activityId, day, time.ToString("HH:mm"), day.AddHours(1),
		time.AddHours(1).ToString("HH:mm"));
		step += 1;
		if (res)
		{
			state = 1;
		}
		else
		{
			state = -1;
		}
	}
	void cancel() { step = 0; }
	void confirm() { step += 1; }
	void setTrip(int id)
	{
		trip = id;
		day = StateContainer.getTripDetails(id)!.startDate;
		step += 1;
	}
	void getMarkers()
	{
		markers.Clear();
		foreach (ItemFormat item in getItemsToday())
		{
			markers.Add(new RadzenGoogleMapMarker
			{
				Position = new GoogleMapPosition()
				{
					Lat = item.activity.latitude,
					Lng =
			item.activity.longitude
				},
				Title = item.activity.name,
				Label = item.activity.name
			});
		}
	}

	void addTrip()
	{
		NavManager.NavigateTo($"/trips?reRoute=activity/{activityId}");
	}
	ItemFormat[] getItemsToday()
	{
		return StateContainer.getItinerary(trip).Where(x => x.startDate == day).ToArray();
	}
}